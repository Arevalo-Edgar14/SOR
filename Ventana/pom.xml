<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.erev.cucei</groupId>
    <artifactId>ventana</artifactId>
    <version>1.0-SNAPSHOT</version>
    <name>Ventana</name>
    <packaging>jar</packaging>
    <description>
        SOR Homework 4: Graphic interface.
        Objective: Know to implement the step by step an application with graphic components.
        Description: Implement a easy graphic interface. The interface need a panel to add 3 buttons and implement a
        windowListener, to only add the components as indicated in the requirements.
        Requirement:
        1. Implement a class to abstract a graphic interface.
        2. The attributes needs the next components:
        3. A Text Field added at the north
        4. A Text Area added at the center
        5. 3 buttons added at south (Is needed to ad a panel with the 3 Buttons).
        6. Is required that the Window had a title, assigned size, that the text area is not editable, and allow to
        close the window with the "X".
        7. Add a constructor in the class
        8. Before to execute the constructor, the object needs to had al the configured interface.
        9. Do not add the event handling because this will be required in the Activity #5.
        SOR Homework 5: Event handler
        Objective: Learn to add the event handling through a listener.
        Description: Extend the easy graphic interface from the Activity #5, adding the event handling for pushing the
        buttons at the south area.
    </description>
    <url>https://github.com/Arevalo-Edgar14/SOR/tree/main/${project.name}</url>
    <licenses>
        <license>
            <name>Apache License</name>
            <url>https://www.apache.org/licenses/</url>
        </license>
    </licenses>
    <developers>
        <developer>
            <id>erev14</id>
            <name>Edgar Joel Arévalo Chavarín</name>
            <email>erevjoach14@gmail.com</email>
        </developer>
    </developers>

    <properties>
        <maven.compiler.source>16</maven.compiler.source>
        <maven.compiler.target>16</maven.compiler.target>

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!-- Junit -->
        <junit.version>5.7.2</junit.version>
        <maven-surefire-plugin.version>2.19.1</maven-surefire-plugin.version>
        <junit-platform-surefire-provider.version>1.1.0</junit-platform-surefire-provider.version>

        <!-- Java FX-->
        <javafx.version>16</javafx.version>
        <javafx-maven-plugin>0.0.6</javafx-maven-plugin>

        <!-- Maven -->
        <maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>

        <!-- Java -->
        <exec-maven-plugin.version>3.0.0</exec-maven-plugin.version>
        <java.version>16</java.version>

        <!-- Project path-->
        <artifactWithGroup>${project.groupId}.${project.artifactId}</artifactWithGroup>
        <mainClassPath>${artifactWithGroup}/${artifactWithGroup}</mainClassPath>
    </properties>

    <dependencies>
        <!-- Java FX-->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>${javafx.version}</version>
        </dependency>

        <!-- Junit -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- Maven -->
            <plugin>
                <!-- Plugin to have maven Lifecycle -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
            </plugin>

            <!-- Junit -->
            <plugin>
                <!-- Plugin to make test works with junit 5-->
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
                <dependencies>
                    <dependency>
                        <groupId>org.junit.platform</groupId>
                        <artifactId>junit-platform-surefire-provider</artifactId>
                        <version>${junit-platform-surefire-provider.version}</version>
                    </dependency>
                </dependencies>
            </plugin>

            <!-- Java FX-->
            <plugin>
                <!-- Plugin to make javafx:run available to run javaFx Application-->
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>${javafx-maven-plugin}</version>
                <executions>
                    <execution>
                        <!-- Default configuration for running with: mvn clean javafx:run -->
                        <id>default-cli</id>
                        <configuration>
                            <mainClass>${mainClassPath}.WindowApplication</mainClass>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>